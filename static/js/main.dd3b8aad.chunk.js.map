{"version":3,"sources":["components/Utils.js","components/StoneAge.js","components/screens/Village.js","components/StoneAgeRenderer.js","App.js","serviceWorker.js","index.js"],"names":["getCurrentCitizens","G","currentCitizens","key","StoneAge","Game","setup","maxCitizens","resources","food","village","agrar","foodProductionFactor","factors","foodConsumptionPerCitizen","moves","addCitizensToAgrar","ctx","removeCitizensFromAgrar","calculate","i","Tile","props","react_default","a","createElement","Grid_default","item","xs","style","height","children","StatusField","Paper_default","marginTop","marginLeft","marginRight","Typography_default","variant","gutterBottom","label","paddingBottom","removeFunction","Button_default","size","onClick","maxCitizen","addFunction","Village","backgroundColor","container","spacing","Village_Tile","Village_StatusField","Views","Technology","Buildings","Evolution","StoneAgeRenderer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentView","onEndTurnButtonClicked","bind","assertThisInitialized","renderScreen","events","endTurn","screens_Village","AppBar_default","position","color","Toolbar_default","TextField_default","id","value","margin","_this2","BottomNavigation_default","showLabels","BottomNavigationAction_default","icon","Home_default","setState","Build_default","Store_default","Autorenew_default","disabled","Send_default","className","padding","renderTopBar","renderBottomBar","Component","App","Client","game","board","numPlayers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd3b8aad.chunk.js","sourcesContent":["\n// calculate the current citizens from the current game state\nexport function getCurrentCitizens(G){\n\n  let currentCitizens = 0;\n\n  for(var key in G){\n    if(G[key].currentCitizens != null){\n      currentCitizens += G[key].currentCitizens\n    }\n  }\n\n  return currentCitizens;\n}","import { Game } from 'boardgame.io/core';\n\nimport { getCurrentCitizens } from './Utils'\n\nconst StoneAge = Game({\n  setup: () => ({\n    maxCitizens: 12,\n\n    resources: {\n        food: 0\n    },\n    \n    village: {\n        currentCitizens: 8\n    },\n    agrar: {\n      currentCitizens: 0,\n      maxCitizens: 10,\n      foodProductionFactor: 2.0\n    },\n\n    factors: {\n      foodConsumptionPerCitizen: 1.0\n    }\n  }),\n  moves: {\n    addCitizensToAgrar(G, ctx){\n      if(G.agrar.currentCitizens < G.agrar.maxCitizens && G.village.currentCitizens > 0){\n        G.agrar.currentCitizens++;\n        G.village.currentCitizens--;\n      }\n    },\n    removeCitizensFromAgrar(G, ctx){\n      if(G.agrar.currentCitizens > 0){\n        G.agrar.currentCitizens--;\n        G.village.currentCitizens++;\n      }\n    },\n    calculate(G, ctx){\n\n      // food production\n      G.resources.food = G.resources.food + G.agrar.currentCitizens * G.agrar.foodProductionFactor;\n\n      // food consumption (adjusted for new citizens)\n      for(var key in G){\n        if(G[key].currentCitizens != null){\n          for(let i = 0; i < G[key].currentCitizens; i++){\n            if(G.resources.food >= G.factors.foodConsumptionPerCitizen){\n              G.resources.food = G.resources.food - G.factors.foodConsumptionPerCitizen;\n            }else{\n              G[key].currentCitizens = i;\n              break;\n            }\n          }\n        }\n      }\n      \n      // add people if food is left\n      while(G.resources.food >= 10 && getCurrentCitizens(G) < G.maxCitizens){\n        G.resources.food -= 10;\n        G.village.currentCitizens++;\n      }\n\n      // don't let food build up indefinitely. Otherwise you could hoard food and build houses later on and BOOM massive citizen rate in one turn.\n      if(G.resources.food > 10){\n        G.resources.food = 9;\n      }\n    }\n  }\n})\n\n\nexport default StoneAge;\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst Tile = (props) => {\n  return (\n    <Grid item xs={3} style={{ height: '20vh' }}>\n      {props.children}\n    </Grid>\n  )\n}\n\nconst StatusField = (props) => {\n  return (\n    <Paper style={{ marginTop: '10%', marginLeft: '20%', marginRight: '20%' }}>\n      <Typography variant=\"h5\" gutterBottom>\n        {props.label}\n      </Typography>\n      \n      <Typography variant=\"h6\" gutterBottom style={{paddingBottom: \"5%\"}}>\n        {/** Check if function to remove a citizen exists in props. If yes, add button and assign onClick */}\n        {!!props.removeFunction && (\n          <Button style={{marginRight: \"4%\"}} variant=\"contained\" size=\"small\" onClick={props.removeFunction}>-</Button>\n        )}\n        {/** Always render the current citizens. Only render the max citizens in applicable */}\n        { props.currentCitizens + ((props.maxCitizen)? \" / \" + props.maxCitizen : \"\") }\n        {/** Check if function to add a citizen exists in props. If yes, add button and assign onClick */}\n        {!!props.addFunction && (\n          <Button style={{marginLeft: \"4%\"}} variant=\"contained\" size=\"small\" onClick={props.addFunction}>+</Button>\n        )}\n        \n      </Typography>\n    </Paper>\n  )\n}\n\nconst Village = (props) => {\n  return (\n    <Grid style={{ backgroundColor: 'lightGray' }} container spacing={0}>\n      <Tile />\n      <Tile>\n        <StatusField \n          label=\"Agrar\" \n          currentCitizens={props.G.agrar.currentCitizens} \n          maxCitizen={props.G.agrar.maxCitizens}\n          removeFunction={props.moves.removeCitizensFromAgrar}\n          addFunction={props.moves.addCitizensToAgrar}/>\n      </Tile>\n      <Tile />\n      <Tile>\n        <StatusField label=\"Culture\"/>\n      </Tile>\n\n      <Tile />\n      <Tile>\n        <StatusField label=\"Fruits\"/>\n      </Tile>\n      <Tile />\n      <Tile>\n        <StatusField label=\"Stone\"/>\n      </Tile>\n\n      <Tile>\n        <StatusField label=\"Village\" currentCitizens={props.G.village.currentCitizens}/>\n      </Tile>\n      <Tile>\n        <StatusField label=\"Fishing\"/>\n      </Tile>\n      <Tile />\n      <Tile />\n    </Grid>\n  );\n}\n\nexport default Village;","import React, { Component } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TextField from '@material-ui/core/TextField';\n\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport BuildIcon from '@material-ui/icons/Build';\nimport StoreIcon from '@material-ui/icons/Store';\nimport AutorenewIcon from '@material-ui/icons/Autorenew'\nimport SendIcon from '@material-ui/icons/Send'\n\nimport Village from './screens/Village'\n\nimport {getCurrentCitizens} from './Utils'\n\n// Constants for the currently shown view (the indexes are used by the bottom navigation)\nconst Views = {\n  Village: 0,\n  Technology: 1,\n  Buildings: 2,\n  Evolution: 3\n}\n\nclass StoneAgeRenderer extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currentView: Views.Village // set default view\n    }\n\n    this.onEndTurnButtonClicked = this.onEndTurnButtonClicked.bind(this);\n    this.renderScreen = this.renderScreen.bind(this);\n  }\n\n\n  onEndTurnButtonClicked() {\n    this.props.moves.calculate();\n    this.props.events.endTurn();\n  }\n\n  // switch case to choose the selected view and render it.\n  renderScreen() {\n    switch (this.state.currentView) {\n      case Views.Village:\n        return <Village {...this.props} />\n    }\n  }\n\n  renderTopBar() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <TextField\n            id=\"outlined-name\"\n            label=\"Population / Max Population\"\n            value={ getCurrentCitizens(this.props.G) + \" / \" + this.props.G.maxCitizens}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </Toolbar>\n      </AppBar>\n    )\n  }\n\n  renderBottomBar(currentView) {\n    return (\n      <BottomNavigation\n        value={currentView}\n        showLabels\n      >\n        <BottomNavigationAction label=\"Village\" icon={<HomeIcon />} onClick={() => this.setState({ currentView: Views.Village })} />\n        <BottomNavigationAction label=\"Technology\" icon={<BuildIcon />} onClick={() => this.setState({ currentView: Views.Technology })} />\n        <BottomNavigationAction label=\"Buildings\" icon={<StoreIcon />} onClick={() => this.setState({ currentView: Views.Buildings })} />\n        <BottomNavigationAction label=\"Evolution\" icon={<AutorenewIcon />} onClick={() => this.setState({ currentView: Views.Evolution })} />\n        <BottomNavigationAction disabled />\n        <BottomNavigationAction label=\"End Turn\" icon={<SendIcon style={{ color: 'green' }} />} onClick={this.onEndTurnButtonClicked} />\n      </BottomNavigation>\n    )\n  }\n\n  render() {\n    const { currentView } = this.state;\n    return (\n      <div className=\"App\" style={{ padding: '2%' }}>\n\n        {this.renderTopBar()}\n\n        <div style={{ height: '60vh' }}>\n          {this.renderScreen()}\n        </div>\n\n        {this.renderBottomBar(currentView)}\n\n\n      </div>\n    );\n  }\n}\n\nexport default StoneAgeRenderer;","import './App.css';\n\nimport { Client } from 'boardgame.io/react';\n\nimport StoneAge from './components/StoneAge'\nimport StoneAgeRenderer from './components/StoneAgeRenderer'\n\nconst App = Client({\n  game: StoneAge,\n  board: StoneAgeRenderer,\n  numPlayers: 1\n})\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}